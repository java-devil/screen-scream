/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import nu.studer.sample.Keys;
import nu.studer.sample.Public;
import nu.studer.sample.tables.records.MovieScheduleRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MovieSchedule extends TableImpl<MovieScheduleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.movie_schedule</code>
     */
    public static final MovieSchedule MOVIE_SCHEDULE = new MovieSchedule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieScheduleRecord> getRecordType() {
        return MovieScheduleRecord.class;
    }

    /**
     * The column <code>public.movie_schedule.booking</code>.
     */
    public final TableField<MovieScheduleRecord, UUID> BOOKING = createField(DSL.name("booking"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.movie_schedule.imdb_id</code>.
     */
    public final TableField<MovieScheduleRecord, String> IMDB_ID = createField(DSL.name("imdb_id"), SQLDataType.CHAR(9).nullable(false), this, "");

    /**
     * The column <code>public.movie_schedule.price</code>.
     */
    public final TableField<MovieScheduleRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(4, 2).nullable(false), this, "");

    /**
     * The column <code>public.movie_schedule.show_time</code>.
     */
    public final TableField<MovieScheduleRecord, LocalDateTime> SHOW_TIME = createField(DSL.name("show_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private MovieSchedule(Name alias, Table<MovieScheduleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MovieSchedule(Name alias, Table<MovieScheduleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.movie_schedule</code> table reference
     */
    public MovieSchedule(String alias) {
        this(DSL.name(alias), MOVIE_SCHEDULE);
    }

    /**
     * Create an aliased <code>public.movie_schedule</code> table reference
     */
    public MovieSchedule(Name alias) {
        this(alias, MOVIE_SCHEDULE);
    }

    /**
     * Create a <code>public.movie_schedule</code> table reference
     */
    public MovieSchedule() {
        this(DSL.name("movie_schedule"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MovieScheduleRecord> getPrimaryKey() {
        return Keys.MOVIE_SCHEDULE_PKEY;
    }

    @Override
    public MovieSchedule as(String alias) {
        return new MovieSchedule(DSL.name(alias), this);
    }

    @Override
    public MovieSchedule as(Name alias) {
        return new MovieSchedule(alias, this);
    }

    @Override
    public MovieSchedule as(Table<?> alias) {
        return new MovieSchedule(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieSchedule rename(String name) {
        return new MovieSchedule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieSchedule rename(Name name) {
        return new MovieSchedule(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieSchedule rename(Table<?> name) {
        return new MovieSchedule(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieSchedule where(Condition condition) {
        return new MovieSchedule(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieSchedule where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieSchedule where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieSchedule where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovieSchedule where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovieSchedule where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovieSchedule where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MovieSchedule where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieSchedule whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MovieSchedule whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
